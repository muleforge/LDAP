<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<xsd:schema xmlns="http://www.mulesource.org/schema/mule/ldap/2.2"
    xmlns:xsd="http://www.w3.org/2001/XMLSchema"
    xmlns:mule="http://www.mulesource.org/schema/mule/core/2.2"
        xmlns:schemadoc="http://www.mulesource.org/schema/mule/schemadoc/2.2"
    targetNamespace="http://www.mulesource.org/schema/mule/ldap/2.2"
    elementFormDefault="qualified" attributeFormDefault="unqualified">

    <xsd:import namespace="http://www.w3.org/XML/1998/namespace"/>
    <xsd:import namespace="http://www.mulesource.org/schema/mule/core/2.2"
        schemaLocation="http://www.mulesource.org/schema/mule/core/2.2/mule.xsd"/>
    <xsd:import
    	namespace="http://www.mulesource.org/schema/mule/schemadoc/2.2"
    	schemaLocation="http://www.mulesource.org/schema/mule/schemadoc/2.2/mule-schemadoc.xsd" />

    <xsd:annotation>
            <xsd:documentation>The ldap transport allows data to be retrieved from and written to any database that supports a ldap driver. It also supports invoking stored precedures.  
            </xsd:documentation>
            <xsd:appinfo>
                <schemadoc:short-name>ldap</schemadoc:short-name>
                <schemadoc:page-title>ldap Transport</schemadoc:page-title>
                <schemadoc:transport-features receiveEvents="true" dispatchEvents="true" responseEvents="true"
    requestEvents="true"
    transactions="true" streaming="false">
                    <schemadoc:inboundMEPs in-only="true" in-optional-out="true" in-out="true"/>
                    <schemadoc:outboundMEPs out-only="true" out-optional-in="true" out-in="true"/>
                </schemadoc:transport-features>
            </xsd:appinfo>
    </xsd:annotation>

    <xsd:element name="connector" type="ldapConnectorType" substitutionGroup="mule:abstract-connector"/>

    <xsd:complexType name="ldapConnectorType">
        <xsd:annotation>
            <xsd:documentation>
                            The ldap connector is used to configure the shared behavior for ldap endpoints that reference the connector. DataSources, Queries, and Polling Intervals are some of the key properties configured on the ldap connector.
                        </xsd:documentation>
        </xsd:annotation>
        <xsd:complexContent>
            <xsd:extension base="mule:connectorType">
                <xsd:sequence>
                    <xsd:element ref="abstract-query" minOccurs="0" maxOccurs="unbounded">
                        <xsd:annotation>
                            <xsd:documentation>Defines a set of queries. Each query has a key
                                and a value (SQL statement). Queries are later referenced by
                                key.</xsd:documentation>
                        </xsd:annotation>
                    </xsd:element>
                </xsd:sequence>
                <xsd:attribute name="pollingFrequency"
                    type="mule:substitutableLong">
                    <xsd:annotation>
                        <xsd:documentation>
                                                    The delay in milliseconds that will be used during two subsequent polls to the database. This is only applied to queries configured on inbound endpoints.
                        </xsd:documentation>
                    </xsd:annotation>
                </xsd:attribute>
                <xsd:attribute name="dataSource-ref" type="xsd:NMTOKEN"
                    use="required">
                    <xsd:annotation>
                        <xsd:documentation>
                                                    Reference to the ldap DataSource object. This object is typically created using Spring. When using XA transactions, an XADataSource object must be provided.
                        </xsd:documentation>
                    </xsd:annotation>
                </xsd:attribute>
                <xsd:attribute name="queryRunner-ref" type="xsd:NMTOKEN">
                    <xsd:annotation>
                        <xsd:documentation>
                                                    Reference to the QueryRunner object, which is the object that actually runs the Query. This object is typically created using Spring. Default is {{org.apache.commons.dbutils.QueryRunner.}}
                        </xsd:documentation>
                    </xsd:annotation>
                </xsd:attribute>
                <xsd:attribute name="resultSetHandler-ref" type="xsd:NMTOKEN">
                    <xsd:annotation>
                        <xsd:documentation>
                                                    Reference to the ResultSetHandler object, which is the object that determines which java.sql.ResultSet gets handled. This object is typically created using Spring. Default is {{org.apache.commons.dbutils.handlers.MapListHandler}}, which steps through the ResultSet and stores records as Map objects on a List.
                                                </xsd:documentation>
                    </xsd:annotation>
                </xsd:attribute>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>

    <xsd:element name="inbound-endpoint" type="inboundEndpointType"
    	substitutionGroup="mule:abstract-inbound-endpoint">
    	<xsd:annotation>
    		<xsd:documentation>
    			Receives or fetches data from a database. You can
    			reference SQL select statements or call stored
    			procedures on inbound endpoints. Statements on the
    			inbound endpoint get invoked periodically according to
    			the pollingInterval. Statements that contain an insert,
    			update, or delete are not allowed.
    		</xsd:documentation>
    	</xsd:annotation>
    </xsd:element>
    <xsd:complexType name="inboundEndpointType">
        <xsd:complexContent>
            <xsd:extension base="mule:inboundEndpointWithXaType">
                <xsd:sequence>
                    <xsd:element ref="abstract-query" minOccurs="0" maxOccurs="unbounded"/>
                </xsd:sequence>
                <xsd:attributeGroup ref="addressAttributes"/>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>

    <xsd:element name="outbound-endpoint" type="outboundEndpointType"
        substitutionGroup="mule:abstract-outbound-endpoint">
        <xsd:annotation>
            <xsd:documentation>
                            You can reference any SQL statement or call a stored procedure on outbound endpoints. Statements on the outbound endpoint get invoked synchronously. SQL select statements or stored procedures may return output that is handled by the ResultSetHandler and then attached to the message as the payload.
            </xsd:documentation>
        </xsd:annotation>
    </xsd:element>
    <xsd:complexType name="outboundEndpointType">
        <xsd:complexContent>
            <xsd:extension base="mule:outboundEndpointWithXaType">
                <xsd:sequence>
                    <xsd:element ref="abstract-query" minOccurs="0" maxOccurs="unbounded"/>
                </xsd:sequence>
                <xsd:attributeGroup ref="addressAttributes"/>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>

    <xsd:element name="endpoint" type="globalEndpointType"
        substitutionGroup="mule:abstract-global-endpoint"/>
    <xsd:complexType name="globalEndpointType">
        <xsd:complexContent>
            <xsd:extension base="mule:globalEndpointWithXaType">
                <xsd:sequence>
                    <xsd:element ref="abstract-query" minOccurs="0" maxOccurs="unbounded"/>
                </xsd:sequence>
                <xsd:attributeGroup ref="addressAttributes"/>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>

    <!-- Define a type hierarchy so that the EE transport can re-define the "query" element. -->
    <xsd:element name="abstract-query" abstract="true" type="abstractQueryType"/>
    <xsd:complexType name="abstractQueryType">
        <xsd:complexContent>
            <xsd:extension base="mule:keyValueType"/>
        </xsd:complexContent>
    </xsd:complexType>
    
    <xsd:element name="query" type="queryType" substitutionGroup="abstract-query">
        <xsd:annotation>
            <xsd:documentation>Assigns a name (key) to a query (value). Queries
                are then referenced by key, such as ldap://myQuery for
                <![CDATA[<ldap:query key="myQuery" value="select * from table"/>]]>
                </xsd:documentation>
        </xsd:annotation>
    </xsd:element>
    <xsd:complexType name="queryType">
        <xsd:complexContent>
            <xsd:extension base="abstractQueryType"/>
        </xsd:complexContent>
    </xsd:complexType>
    
    <xsd:attributeGroup name="addressAttributes">
        <xsd:attribute name="queryKey" type="xsd:string"/>
        <xsd:attribute name="pollingFrequency" type="mule:substitutableLong"/>
    </xsd:attributeGroup>

    <xsd:element name="transaction" type="transactionType" substitutionGroup="mule:abstract-transaction">
        <xsd:annotation>
            <xsd:documentation>
                            Standard Mule transaction configuration. See [Transaction Management] for usage details. 
            </xsd:documentation>
        </xsd:annotation>
    </xsd:element>
    <xsd:complexType name="transactionType">
        <xsd:complexContent>
            <xsd:extension base="mule:baseTransactionType"/>
        </xsd:complexContent>
    </xsd:complexType>
</xsd:schema>
